{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USUARIO\\\\Desktop\\\\PI\\\\PI-Countries-main\\\\client\\\\src\\\\components\\\\AddActivity\\\\AddActivity.jsx\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import Nav from \"../Nav/Nav\";\n\n// const AddActivity = () => {\n//     const [activities, setActivities] = useState(\n//         {\n//             name: null,\n//             difficulty: 3,\n//             duration: null,\n//             season: 'summer',\n//             countries: ''\n//         })\n\n//     return(\n//         <div>\n//             <Nav/>\n//             <h1>New activity</h1>\n\n//         </div>\n//     )\n//     }\n\n// export default AddActivity;\n\nimport React from 'react';\nimport Nav from '../Nav/Nav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n  let [activity, setActivity] = React.useState({\n    name: '',\n    difficulty: 3,\n    duration: '',\n    season: 'summer',\n    countries: ''\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hola\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n\n  // let [errors, setErrors] = React.useState({});\n  // let [countries, setCountries] = React.useState([]);\n  // let [addCountries, setAddCountries] = React.useState([]);\n\n  // React.useEffect(() =>{\n  //     fetch('http://localhost:3001/countries/')\n  //     .then(resp => resp.json())\n  //     .then(data =>{\n  //             let myMap = data.map(el => {return {id: el.id, name: el.name}})\n  //             myMap = myMap.sort(SortArray)\n  //             setCountries(myMap);\n  //         });\n  // },[]);\n\n  // function SortArray(x, y){\n  //     return x.name.localeCompare(y.name, 'fr', {ignorePunctuation: true});\n  // }\n\n  // function handleChange(e){\n  //     e.preventDefault();\n  //     setActivity((prev) => ({...prev, [e.target.name]: e.target.value}));\n  //     setErrors(validation({...activity, [e.target.name]: e.target.value}));\n  // }\n\n  // function handleChangeName(e){\n  //     e.preventDefault();\n  //     setActivity((prev) => ({...prev, name: e.target.value.trimStart().toLowerCase()}));\n  //     setErrors(validation({...activity, name: e.target.value.trimStart().toLowerCase()}));\n  // }\n\n  // function handleSubmit(e){\n  //     e.preventDefault();\n  //     if(Object.keys(errors).length === 0){\n  //         fetch('http://localhost:3001/activities', {\n  //                 method: 'POST',\n  //                 headers: {'Content-Type': 'application/json;charset=utf-8'},\n  //                 body: JSON.stringify(\n  //                     {\n  //                         name: activity.name,\n  //                         difficulty: activity.difficulty,\n  //                         duration: activity.duration,\n  //                         season: activity.season,\n  //                         country: addCountries\n  //                     })\n  //         })\n  //         .then(res => res.json())\n  //         .then(res =>{\n  //             if(res.hasOwnProperty('msg')) {\n  //                 alert(res.msg);\n  //             }else {\n  //                 alert(res.error);\n  //             }\n  //             setActivity({name: '', difficulty: '', duration: '', season: 'summer', countries: ''});\n  //             setAddCountries([]);\n  //         })\n  //         .catch(e => console.log(e));\n  //     }\n  // }\n\n  // function validation(){\n  //     let errors = {};\n  //     const regexName = /^[a-zA-\\s]+(?: [a-zA-\\s]+)*$/i;\n  //     if(activity.name === '') {\n  //         errors.name = 'Insert the name';\n  //     }\n  //     if(!regexName.test(activity.name)) {\n  //         errors.name = 'The name must has only letters';\n  //     }\n  //     // if(activity.name.length < 3 || activity.name.length > 20) errors.name = \"The name's size isn't valid\";\n\n  //     if(![1,2,3,4,5].includes(parseInt(activity.difficulty))) {\n  //         errors.difficulty = \"The difficult isn't valid\"\n  //     }\n\n  //     let hours = Math.trunc(Number(activity.duration));\n  //     let minutes = hours === 0 ? Number(activity.duration) * 100 : (Number(activity.duration) % hours) * 100;\n\n  //     if((hours > 8) || (minutes === 0 && hours <= 0)) {\n  //         errors.duration = \"The amount of hours is not valid\";\n  //     }\n  //     if(minutes < 0 || minutes > 59) {\n  //         errors.duration = \"The amount of minutes is not valid\";\n  //     }\n  //     if(!['summer','spring','autumn','winter'].includes(activity.season)) {\n  //         errors.season = \"The season isn't valid\";\n  //     }\n  //     if(addCountries.length < 0) {\n  //         errors.countries = \"Select a country\";\n  //     }\n  //     return errors;\n  // }\n\n  // function addCountry(e){\n  //     e.preventDefault();\n  //     if (activity.countries === \"\") {\n  //         setErrors({...errors, countries: 'Select a country as'});\n  //     }else{\n  //         if(addCountries.includes(activity.countries)){\n  //             setErrors({...errors, countries: 'You are already selected this country'});\n\n  //         }else{\n  //             setAddCountries([...addCountries, activity.countries]);\n  //             setActivity({...activity, countries: ''});\n  //         }\n  //     }\n  // }\n\n  // function deleteCountry(id){\n  //     let newList = addCountries.filter(country => country !== id);\n  //     setAddCountries(newList);\n  // }\n\n  // return (\n  //     <React.Fragment>\n  //     <div>\n  //         <Nav/>\n  //         <div>\n  //                 <form>\n  //                 <div>\n  //                             <p>New activity</p>\n  //                 </div>\n  //                 <div>\n  //                     <label>Name: </label>\n  //                     <input\n  //                         type=\"text\"\n  //                         title=\"The name's size must be a min 3, max 20 and must has only letters\"\n  //                         autocomplete=\"off\"\n  //                         name=\"name\"\n  //                         value={activity.name}\n  //                         onChange={(e) => handleChangeName(e)}\n  //                     />\n  //                 </div>\n\n  //                 <div>\n  //                     <label>Duration: </label>\n  //                     <input\n  //                         type=\"number\"\n  //                         min=\"0\"\n  //                         max=\"10\"\n  //                         step=\"1.00\"\n  //                         title='The activity must has a duration between 1 min and 10 hours'\n  //                         placeholder=\"hrs\"\n  //                         name=\"duration\"\n  //                         value={activity.duration}\n  //                         onChange={(e) => handleChange(e)}\n  //                     />\n  //                 </div>\n\n  //                 <div>\n  //                 <div>\n  //                     <label>Difficult: </label>\n  //                     <select\n  //                         name=\"difficult\"\n  //                         value={activity.difficulty}\n  //                         onChange={(e) => handleChange(e)}\n  //                     >\n  //                         <option value=\"1\">So easy</option>\n  //                         <option value=\"2\">Easy</option>\n  //                         <option value=\"3\">Normal</option>\n  //                         <option value=\"4\">Hard</option>\n  //                         <option value=\"5\">So hard</option>\n  //                     </select>\n  //                 </div>\n\n  //                 <div>\n  //                     <label>Season: </label>\n  //                     <select\n  //                         name=\"season\"\n  //                         value={activity.season}\n  //                         onChange={(e) => handleChange(e)}\n  //                     >\n  //                         <option value=\"summer\">Summer</option>\n  //                         <option value=\"spring\">Spring</option>\n  //                         <option value=\"autumn\">Autumn</option>\n  //                         <option value=\"winter\">Winter</option>\n  //                     </select>\n  //                 </div>\n  //             </div>\n\n  //             <div>\n  //                 <label>Countries: </label>\n  //                     <select\n  //                         name=\"countries\"\n  //                         value={activity.countries}\n  //                         onChange={(e) => handleChange(e)}\n  //                     >\n  //                     <option value=\"deafult\" selected>Select country</option>\n  //                         {\n  //                             countries.length > 0 && countries.map(el =>\n  //                                 {\n  //                                     return (\n  //                                         <option value={el.id}>{el.name}</option>\n  //                                     )\n  //                                 })\n  //                         }\n  //                     </select>\n  //                     <button onClick={(e) => addCountry(e)}>Add country</button>\n  //                     </div>\n\n  //                     <div>\n  //                         <p>List of countries:</p>\n  //                         <div>\n  //                             {\n  //                                 addCountries.length > 0 && addCountries.map(el =>\n  //                                     {\n  //                                         return (\n  //                                             <div>\n  //                                                 <span>{el}</span>\n  //                                                     <button type=\"button\" onClick={() => deleteCountry(el)}>X</button>\n  //                                             </div>\n  //                                         )\n  //                                     })\n  //                                     }\n  //                         </div>\n  //                     </div>\n  //                     <button \n  //                         onClick={(e) => handleSubmit(e)}>Create activity\n  //                     </button>\n  //                 </form>\n  //             </div>\n  //     </div>\n  //     </React.Fragment>\n  // )\n}\n_s(Form, \"Hsq1Ocm3x6G7mCi7x02a1mU4HZQ=\");\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","Nav","jsxDEV","_jsxDEV","Form","_s","activity","setActivity","useState","name","difficulty","duration","season","countries","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USUARIO/Desktop/PI/PI-Countries-main/client/src/components/AddActivity/AddActivity.jsx"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import Nav from \"../Nav/Nav\";\r\n\r\n\r\n// const AddActivity = () => {\r\n//     const [activities, setActivities] = useState(\r\n//         {\r\n//             name: null,\r\n//             difficulty: 3,\r\n//             duration: null,\r\n//             season: 'summer',\r\n//             countries: ''\r\n//         })\r\n\r\n\r\n//     return(\r\n//         <div>\r\n//             <Nav/>\r\n//             <h1>New activity</h1>\r\n\r\n//         </div>\r\n//     )\r\n//     }\r\n\r\n\r\n// export default AddActivity;\r\n\r\n\r\nimport React from 'react';\r\nimport Nav from '../Nav/Nav';\r\n\r\n\r\nexport default function Form() {\r\n    let [activity, setActivity] = React.useState(\r\n                {\r\n                    name: '',\r\n                    difficulty: 3,\r\n                    duration: '',\r\n                    season: 'summer',\r\n                    countries: ''\r\n                });\r\n    return(\r\n        <div>hola</div>\r\n    )\r\n\r\n    // let [errors, setErrors] = React.useState({});\r\n    // let [countries, setCountries] = React.useState([]);\r\n    // let [addCountries, setAddCountries] = React.useState([]);\r\n\r\n    // React.useEffect(() =>{\r\n    //     fetch('http://localhost:3001/countries/')\r\n    //     .then(resp => resp.json())\r\n    //     .then(data =>{\r\n    //             let myMap = data.map(el => {return {id: el.id, name: el.name}})\r\n    //             myMap = myMap.sort(SortArray)\r\n    //             setCountries(myMap);\r\n    //         });\r\n    // },[]);\r\n\r\n    // function SortArray(x, y){\r\n    //     return x.name.localeCompare(y.name, 'fr', {ignorePunctuation: true});\r\n    // }\r\n\r\n    // function handleChange(e){\r\n    //     e.preventDefault();\r\n    //     setActivity((prev) => ({...prev, [e.target.name]: e.target.value}));\r\n    //     setErrors(validation({...activity, [e.target.name]: e.target.value}));\r\n    // }\r\n\r\n    // function handleChangeName(e){\r\n    //     e.preventDefault();\r\n    //     setActivity((prev) => ({...prev, name: e.target.value.trimStart().toLowerCase()}));\r\n    //     setErrors(validation({...activity, name: e.target.value.trimStart().toLowerCase()}));\r\n    // }\r\n\r\n    // function handleSubmit(e){\r\n    //     e.preventDefault();\r\n    //     if(Object.keys(errors).length === 0){\r\n    //         fetch('http://localhost:3001/activities', {\r\n    //                 method: 'POST',\r\n    //                 headers: {'Content-Type': 'application/json;charset=utf-8'},\r\n    //                 body: JSON.stringify(\r\n    //                     {\r\n    //                         name: activity.name,\r\n    //                         difficulty: activity.difficulty,\r\n    //                         duration: activity.duration,\r\n    //                         season: activity.season,\r\n    //                         country: addCountries\r\n    //                     })\r\n    //         })\r\n    //         .then(res => res.json())\r\n    //         .then(res =>{\r\n    //             if(res.hasOwnProperty('msg')) {\r\n    //                 alert(res.msg);\r\n    //             }else {\r\n    //                 alert(res.error);\r\n    //             }\r\n    //             setActivity({name: '', difficulty: '', duration: '', season: 'summer', countries: ''});\r\n    //             setAddCountries([]);\r\n    //         })\r\n    //         .catch(e => console.log(e));\r\n    //     }\r\n    // }\r\n\r\n    // function validation(){\r\n    //     let errors = {};\r\n    //     const regexName = /^[a-zA-\\s]+(?: [a-zA-\\s]+)*$/i;\r\n    //     if(activity.name === '') {\r\n    //         errors.name = 'Insert the name';\r\n    //     }\r\n    //     if(!regexName.test(activity.name)) {\r\n    //         errors.name = 'The name must has only letters';\r\n    //     }\r\n    //     // if(activity.name.length < 3 || activity.name.length > 20) errors.name = \"The name's size isn't valid\";\r\n\r\n    //     if(![1,2,3,4,5].includes(parseInt(activity.difficulty))) {\r\n    //         errors.difficulty = \"The difficult isn't valid\"\r\n    //     }\r\n\r\n    //     let hours = Math.trunc(Number(activity.duration));\r\n    //     let minutes = hours === 0 ? Number(activity.duration) * 100 : (Number(activity.duration) % hours) * 100;\r\n\r\n    //     if((hours > 8) || (minutes === 0 && hours <= 0)) {\r\n    //         errors.duration = \"The amount of hours is not valid\";\r\n    //     }\r\n    //     if(minutes < 0 || minutes > 59) {\r\n    //         errors.duration = \"The amount of minutes is not valid\";\r\n    //     }\r\n    //     if(!['summer','spring','autumn','winter'].includes(activity.season)) {\r\n    //         errors.season = \"The season isn't valid\";\r\n    //     }\r\n    //     if(addCountries.length < 0) {\r\n    //         errors.countries = \"Select a country\";\r\n    //     }\r\n    //     return errors;\r\n    // }\r\n\r\n    // function addCountry(e){\r\n    //     e.preventDefault();\r\n    //     if (activity.countries === \"\") {\r\n    //         setErrors({...errors, countries: 'Select a country as'});\r\n    //     }else{\r\n    //         if(addCountries.includes(activity.countries)){\r\n    //             setErrors({...errors, countries: 'You are already selected this country'});\r\n                \r\n    //         }else{\r\n    //             setAddCountries([...addCountries, activity.countries]);\r\n    //             setActivity({...activity, countries: ''});\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // function deleteCountry(id){\r\n    //     let newList = addCountries.filter(country => country !== id);\r\n    //     setAddCountries(newList);\r\n    // }\r\n\r\n    // return (\r\n    //     <React.Fragment>\r\n    //     <div>\r\n    //         <Nav/>\r\n    //         <div>\r\n    //                 <form>\r\n    //                 <div>\r\n    //                             <p>New activity</p>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <label>Name: </label>\r\n    //                     <input\r\n    //                         type=\"text\"\r\n    //                         title=\"The name's size must be a min 3, max 20 and must has only letters\"\r\n    //                         autocomplete=\"off\"\r\n    //                         name=\"name\"\r\n    //                         value={activity.name}\r\n    //                         onChange={(e) => handleChangeName(e)}\r\n    //                     />\r\n    //                 </div>\r\n\r\n    //                 <div>\r\n    //                     <label>Duration: </label>\r\n    //                     <input\r\n    //                         type=\"number\"\r\n    //                         min=\"0\"\r\n    //                         max=\"10\"\r\n    //                         step=\"1.00\"\r\n    //                         title='The activity must has a duration between 1 min and 10 hours'\r\n    //                         placeholder=\"hrs\"\r\n    //                         name=\"duration\"\r\n    //                         value={activity.duration}\r\n    //                         onChange={(e) => handleChange(e)}\r\n    //                     />\r\n    //                 </div>\r\n\r\n    //                 <div>\r\n    //                 <div>\r\n    //                     <label>Difficult: </label>\r\n    //                     <select\r\n    //                         name=\"difficult\"\r\n    //                         value={activity.difficulty}\r\n    //                         onChange={(e) => handleChange(e)}\r\n    //                     >\r\n    //                         <option value=\"1\">So easy</option>\r\n    //                         <option value=\"2\">Easy</option>\r\n    //                         <option value=\"3\">Normal</option>\r\n    //                         <option value=\"4\">Hard</option>\r\n    //                         <option value=\"5\">So hard</option>\r\n    //                     </select>\r\n    //                 </div>\r\n\r\n    //                 <div>\r\n    //                     <label>Season: </label>\r\n    //                     <select\r\n    //                         name=\"season\"\r\n    //                         value={activity.season}\r\n    //                         onChange={(e) => handleChange(e)}\r\n    //                     >\r\n    //                         <option value=\"summer\">Summer</option>\r\n    //                         <option value=\"spring\">Spring</option>\r\n    //                         <option value=\"autumn\">Autumn</option>\r\n    //                         <option value=\"winter\">Winter</option>\r\n    //                     </select>\r\n    //                 </div>\r\n    //             </div>\r\n\r\n    //             <div>\r\n    //                 <label>Countries: </label>\r\n    //                     <select\r\n    //                         name=\"countries\"\r\n    //                         value={activity.countries}\r\n    //                         onChange={(e) => handleChange(e)}\r\n    //                     >\r\n    //                     <option value=\"deafult\" selected>Select country</option>\r\n    //                         {\r\n    //                             countries.length > 0 && countries.map(el =>\r\n    //                                 {\r\n    //                                     return (\r\n    //                                         <option value={el.id}>{el.name}</option>\r\n    //                                     )\r\n    //                                 })\r\n    //                         }\r\n    //                     </select>\r\n    //                     <button onClick={(e) => addCountry(e)}>Add country</button>\r\n    //                     </div>\r\n\r\n    //                     <div>\r\n    //                         <p>List of countries:</p>\r\n    //                         <div>\r\n    //                             {\r\n    //                                 addCountries.length > 0 && addCountries.map(el =>\r\n    //                                     {\r\n    //                                         return (\r\n    //                                             <div>\r\n    //                                                 <span>{el}</span>\r\n    //                                                     <button type=\"button\" onClick={() => deleteCountry(el)}>X</button>\r\n    //                                             </div>\r\n    //                                         )\r\n    //                                     })\r\n    //                                     }\r\n    //                         </div>\r\n    //                     </div>\r\n    //                     <button \r\n    //                         onClick={(e) => handleSubmit(e)}>Create activity\r\n    //                     </button>\r\n    //                 </form>\r\n    //             </div>\r\n    //     </div>\r\n    //     </React.Fragment>\r\n    // )\r\n}\r\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG7B,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC3B,IAAI,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,KAAK,CAACQ,QAAQ,CAChC;IACIC,IAAI,EAAE,EAAE;IACRC,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,QAAQ;IAChBC,SAAS,EAAE;EACf,CAAC,CAAC;EACd,oBACIV,OAAA;IAAAW,QAAA,EAAK;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAM;;EAGnb,EAAA,CA5OuBD,IAAI;AAAAe,EAAA,GAAJf,IAAI;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}